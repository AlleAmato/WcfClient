//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConvertitoreValute.ConvertitoreService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConvertitoreService.IConvertitoreService")]
    public interface IConvertitoreService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConvertitoreService/Converti", ReplyAction="http://tempuri.org/IConvertitoreService/ConvertiResponse")]
        float Converti(float importo, string da, string a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConvertitoreService/Converti", ReplyAction="http://tempuri.org/IConvertitoreService/ConvertiResponse")]
        System.Threading.Tasks.Task<float> ConvertiAsync(float importo, string da, string a);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IConvertitoreServiceChannel : ConvertitoreValute.ConvertitoreService.IConvertitoreService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConvertitoreServiceClient : System.ServiceModel.ClientBase<ConvertitoreValute.ConvertitoreService.IConvertitoreService>, ConvertitoreValute.ConvertitoreService.IConvertitoreService {
        
        public ConvertitoreServiceClient() {
        }
        
        public ConvertitoreServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ConvertitoreServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConvertitoreServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConvertitoreServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public float Converti(float importo, string da, string a) {
            return base.Channel.Converti(importo, da, a);
        }
        
        public System.Threading.Tasks.Task<float> ConvertiAsync(float importo, string da, string a) {
            return base.Channel.ConvertiAsync(importo, da, a);
        }
    }
}
